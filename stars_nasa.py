# -*- coding: utf-8 -*-
"""stars-nasa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vVA0LfUo88kzuyb_-U9UJUXs8tmMbc9z
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

!ls

path = "/content/drive/MyDrive/Pesquisas/Data Science/Nasa-Stars"

from google.colab import drive

"""# Data Analysis"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv(f"{path}/Stars.csv")

df.head()

sns.heatmap(df.isnull());

sns.heatmap(df.corr());

sns.pairplot(df);

df.describe()

df.info()

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df['Color'].value_counts()

df['Color_'] = LabelEncoder().fit_transform(df['Color'])

df.drop('Color', axis=1, inplace=True)

df['Spectral_Class'] = LabelEncoder().fit_transform(df['Spectral_Class'])

df.head()

x = df[['Temperature', 'L', "R", "A_M", "Spectral_Class", "Color_"]]
y = df[["Type"]]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

df.shape

"""# Machine Learning Model"""

from sklearn.linear_model import LogisticRegression, LinearRegression

model = LogisticRegression().fit(x_train, y_train)

predict_1 = model.predict(x_test)

model_2 = LinearRegression().fit(x_train, y_train)

predict_2 = model_2.predict(x_test)

from sklearn.metrics import accuracy_score, r2_score

print("{:.2f}%" .format(accuracy_score(predict_1, y_test)*100))
print("{:.2f}%" .format(r2_score(predict_2, y_test)*100))

predict_1.shape

predict_2.shape

"""### Regressão Linear > 58.33%
### Regressão Logística > 94.86%

-------------------------------------------------------------------------------------------_

# Rede Neural
"""

df.head()

x = df[["Temperature", "L", "R", "A_M", "Spectral_Class", "Color_"]].values
y = df[["Type"]].values

x.shape

df["Type"]

df["Type"].value_counts()

df.head()

from keras.utils import np_utils

x = df[["Temperature", "L", "R", "A_M", "Spectral_Class", "Color_"]].values
y = df[["Type"]].values

labelencoder = LabelEncoder()
classe = labelencoder.fit_transform(y)
classe_dummy = np_utils.to_categorical(y)

x_train, x_test, y_train, y_test = train_test_split(x, classe_dummy, test_size=0.2)

pd.DataFrame(classe_dummy)

"""### Neural Model"""



import keras
from keras.layers import Dense, Dropout
from keras.models import Sequential

classificador = Sequential()

classificador.add(Dense(units = 7, activation = 'relu', input_dim = 6))
classificador.add(Dense(units = 7, activation = 'relu'))
classificador.add(Dense(units = 7, activation = 'relu'))
classificador.add(Dense(units = 6, activation = 'softmax'))
classificador.compile(optimizer = 'adam', loss="categorical_crossentropy",
                      metrics = ['categorical_accuracy'])

classificador.summary()

classificador.fit(x_train, y_train, batch_size = 10,
                  epochs = 1000, validation_data=(x_test, y_test))

resultado = classificador.evaluate(x_test, y_test)
previsoes = classificador.predict(x_test)

previsoes = (previsoes > 0.5)

from sklearn.metrics import confusion_matrix

classe_teste2 = [np.argmax(t) for t in y_test]
previsoes2 = [np.argmax(t) for t in x]

sns.heatmap(previsoes);



print("{:.2f}%" .format(r2_score(previsoes, y_test)*100))
print("{:.2f}%" .format(accuracy_score(previsoes, y_test)*100))

